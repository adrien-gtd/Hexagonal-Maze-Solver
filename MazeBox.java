import graph.Vertex;
import java.util.List;
import java.util.ArrayList;

public abstract class MazeBox implements Vertex {
    protected final int coordinateX;
    protected final int coordinateY;
    protected final int id;
    protected final Maze maze;

    public MazeBox (int x, int y, Maze maze) {
        this.coordinateX = x;
        this.coordinateY = y;
        this.id = maze.getSizeY() * x + y;
        this.maze = maze;
    }

    public int getX () {
        return this.coordinateX;
    }

    public int getY() {
        return this.coordinateY;
    }


    @Override
    public boolean isEqualTo (Vertex v) {
        if (v.getId() == this.id) 
            return true;
        else
            return false;
    }   

    @Override
    public int getId () {
        return this.id;
    }

    @Override
    public List<Vertex> getNextVertices () {                            //return a list of vertices next to the current vertex in the graph generated by the grid  
        ArrayList<Vertex> neighborList = new ArrayList<Vertex>();
        int parity;
        if (coordinateX % 2 == 0)
            parity = -1;
        else
            parity = 1;
        getNeighbor(coordinateX, coordinateY + 1, neighborList);
        getNeighbor(coordinateX, coordinateY - 1, neighborList);
        getNeighbor(coordinateX + 1, coordinateY + parity, neighborList);
        getNeighbor(coordinateX + 1, coordinateY, neighborList);
        getNeighbor(coordinateX - 1, coordinateY + parity, neighborList);
        getNeighbor(coordinateX - 1, coordinateY, neighborList);

        return neighborList;
    }

    @Override
    public String getLabel() {
        return Integer.toString(id);
    }

    private void getNeighbor(int x,int y, ArrayList<Vertex> list) {
        if(isNeighbor(x, y))
            list.add(maze.getBox(x, y));
        return;
    }
 
    private boolean isNeighbor (int x, int y) {
        if (maze.isInMaze(x, y))
            if (maze.getBox(x, y).isEmpty())
                return true;

        return false;
    }

    

    public abstract boolean isEmpty();
}
